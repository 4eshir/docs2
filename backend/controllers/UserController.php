<?php

namespace backend\controllers;

use backend\models\search\SearchUser;
use common\models\work\UserWork;
use common\repositories\general\UserRepository;
use frontend\models\work\rubac\PermissionFunctionWork;
use Yii;
use yii\web\Controller;

class UserController extends Controller
{
    private UserRepository $repository;

    public function __construct(
        $id,
        $module,
        UserRepository $repository,
        $config = []
    )
    {
        parent::__construct($id, $module, $config);
        $this->repository = $repository;
    }

    public function actionIndex()
    {
        $searchModel = new SearchUser();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionCreate()
    {
        $model = new UserWork();
        $modelRules = [new PermissionFunctionWork];

        if ($model->load(Yii::$app->request->post())) {
            $model->setPassword($model->password_hash);
            $this->repository->save($model);
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('create', [
            'model' => $model,
            'modelRules' => $modelRules,
        ]);
    }

    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        $modelRole = [new RoleWork];

        if ($model->load(Yii::$app->request->post())) {
            $modelRole = DynamicModel::createMultiple(RoleWork::classname());
            DynamicModel::loadMultiple($modelRole, Yii::$app->request->post());
            $model->roles = $modelRole;
            //$model->last_update_id = Yii::$app->user->identity->getId();
            $model->save();
            Logger::WriteLog(Yii::$app->user->identity->getId(), 'Изменен пользователь '.$model->username);
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
            'modelRole' => $modelRole,
        ]);
    }

    /**
     * Deletes an existing User model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        Logger::WriteLog(Yii::$app->user->identity->getId(), 'Удален пользователь '.$this->findModel($id)->username);
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    public function actionDeleteRole($roleId, $modelId)
    {
        $role = UserRoleWork::find()->where(['id' => $roleId])->one();
        $name = $role->role->name;
        $role->delete();
        $user = UserWork::find()->where(['id' => $modelId])->one();
        Logger::WriteLog(Yii::$app->user->identity->getId(), 'Откреплена роль ' . $name . ' от пользователя '. $user->secondname . ' ' . $user->firstname);

        return $this->redirect('index?r=user/update&id='.$modelId);
    }


    /**
     * Finds the User model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return UserWork the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = UserWork::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }

    //Проверка на права доступа к CRUD-операциям
    public function beforeAction($action)
    {
        if (Yii::$app->user->isGuest)
            return $this->redirect(['/site/login']);
        if (!RoleBaseAccess::CheckAccess($action->controller->id, $action->id, Yii::$app->user->identity->getId())) {
            return $this->redirect(['/site/error-access']);
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
}