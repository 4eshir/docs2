<?php

namespace frontend\models\work\event;

use common\helpers\files\FilesHelper;
use common\helpers\StringFormatter;
use common\models\scaffold\Event;
use common\repositories\event\EventRepository;
use common\repositories\general\FilesRepository;
use common\repositories\regulation\RegulationRepository;
use frontend\models\work\document_in_out\DocumentInWork;
use frontend\models\work\general\FilesWork;
use frontend\models\work\general\PeopleWork;
use InvalidArgumentException;
use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;

class EventWork extends Event
{
    public $protocolFiles;
    public $reportingFiles;
    public $photoFiles;
    public $otherFiles;

    public $scopes;

    public $isTechnopark;
    public $isQuantorium;
    public $isCDNTT;
    public $isMobQuant;
    public $isCod;

    public function getResponsible1Work()
    {
        return $this->hasOne(PeopleWork::class, ['id' => 'responsible1_id']);
    }

    public function getResponsible2Work()
    {
        return $this->hasOne(PeopleWork::class, ['id' => 'responsible2_id']);
    }

    public function getEventBranches()
    {
        $eventBranches = (Yii::createObject(EventRepository::class))->getBranches($this->id);

        $result = '';
        $branches = ArrayHelper::getColumn($eventBranches, 'branch');
        foreach ($branches as $branch) {
            $result .= Yii::$app->branches->get($branch) . ' ';
        }

        return $result;
    }

    public function getRegulationRaw()
    {
        $regulation = (Yii::createObject(RegulationRepository::class))->get($this->regulation_id);

        return $regulation ?
            StringFormatter::stringAsLink("Положение '$regulation->name'", Url::to(['regulation/regulation/view', 'id' => $regulation->id])) :
            'Нет';
    }

    public function getResponsibles()
    {
        $resbonsibles = [];
        if ($this->responsible1_id) {
            $resbonsibles[] = StringFormatter::stringAsLink($this->responsible1Work->getFio(PeopleWork::FIO_SURNAME_INITIALS), Url::to(['dictionaries/people/view', 'id' => $this->responsible1_id]));
        }
        if ($this->responsible2_id) {
            $resbonsibles[] = StringFormatter::stringAsLink($this->responsible2Work->getFio(PeopleWork::FIO_SURNAME_INITIALS), Url::to(['dictionaries/people/view', 'id' => $this->responsible2_id]));
        }

        return implode('<br>', $resbonsibles);
    }

    /**
     * Возвращает массив
     * link => форматированная ссылка на документ
     * id => ID записи в таблице files
     * @param $filetype
     * @return array
     * @throws \yii\base\InvalidConfigException
     */
    public function getFileLinks($filetype)
    {
        if (!array_key_exists($filetype, FilesHelper::getFileTypes())) {
            throw new InvalidArgumentException('Неизвестный тип файла');
        }

        $addPath = '';
        switch ($filetype) {
            case FilesHelper::TYPE_PROTOCOL:
                $addPath = FilesHelper::createAdditionalPath(DocumentInWork::tableName(), FilesHelper::TYPE_PROTOCOL);
                break;
            case FilesHelper::TYPE_PHOTO:
                $addPath = FilesHelper::createAdditionalPath(DocumentInWork::tableName(), FilesHelper::TYPE_PHOTO);
                break;
            case FilesHelper::TYPE_REPORT:
                $addPath = FilesHelper::createAdditionalPath(DocumentInWork::tableName(), FilesHelper::TYPE_REPORT);
                break;
            case FilesHelper::TYPE_OTHER:
                $addPath = FilesHelper::createAdditionalPath(DocumentInWork::tableName(), FilesHelper::TYPE_OTHER);
                break;
        }

        $files = (Yii::createObject(FilesRepository::class))->get(self::tableName(), $this->id, $filetype);
        $links = [];
        if (count($files) > 0) {
            foreach ($files as $file) {
                /** @var FilesWork $file */
                $links[] = [
                    'link' => StringFormatter::stringAsLink(
                        FilesHelper::getFilenameFromPath($file->filepath),
                        Url::to(['get-file', 'filepath' => $addPath . $file->filepath])
                    ),
                    'id' => $file->id
                ];
            }
        }

        return $links;
    }

    public function beforeValidate()
    {
        if ($this->order_id == '') $this->order_id = null;
        if ($this->regulation_id == '') $this->regulation_id = null;
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
}